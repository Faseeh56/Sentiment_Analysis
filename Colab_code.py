# -*- coding: utf-8 -*-
"""SentimentAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o8wDYM_CEdaZDXdXO4UhfGHiBtoV5GK1
"""

# Basic libraries
import pandas as pd
import numpy as np

# Text preprocessing
import re
import string
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords

# Machine learning
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, f1_score, classification_report

# For interface
import ipywidgets as widgets
from IPython.display import display

# Load the uploaded file (adjust filename if different)
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/IMDB Dataset.csv')

# Display the first few rows
df.head()

import nltk
nltk.download('stopwords')

import re
import string
from nltk.corpus import stopwords

# Define the stopwords
stop_words = set(stopwords.words('english'))

# Text preprocessing function
def preprocess_text(text):
    # Lowercase
    text = text.lower()
    # Remove HTML tags
    text = re.sub(r'<.*?>', '', text)
    # Remove punctuation
    text = text.translate(str.maketrans('', '', string.punctuation))
    # Remove stopwords
    text = ' '.join(word for word in text.split() if word not in stop_words)
    return text

# Apply preprocessing
df['cleaned_review'] = df['review'].apply(preprocess_text)

# Preview the cleaned data
df[['review', 'cleaned_review']].head()

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, f1_score

# Load your dataset (make sure to replace this with your dataset)
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/IMDB Dataset.csv')

# Preprocess text data and split dataset
X = df['review']
y = df['sentiment'].apply(lambda x: 1 if x == 'positive' else 0)  # Convert sentiment labels

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 2: Fit the TfidfVectorizer on training data
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)  # This is where fitting happens

# Step 3: Train the model (e.g., Naive Bayes)
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

# Step 4: Evaluate the model
X_test_tfidf = vectorizer.transform(X_test)
y_pred = model.predict(X_test_tfidf)

# Accuracy and F1 score
accuracy = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")
print(f"F1-Score: {f1}")

# Define a function to predict sentiment of a new review
def predict_sentiment(review):
    # Transform the review using the fitted vectorizer
    review_transformed = vectorizer.transform([review])

    # Predict sentiment
    prediction = model.predict(review_transformed)[0]

    # Output result
    if prediction == 1:
        print("ðŸŸ¢ Positive Review")
    else:
        print("ðŸ”´ Negative Review")

predict_sentiment("This movie was amazing!")  # Should output Positive Review
predict_sentiment("I hated this movie.")  # Should output Negative Review

def run_sentiment_analysis():
    print("Welcome to the Movie Review Sentiment Analyzer!")

    # Take input from the user
    review = input("Please enter your movie review: ")

    # Predict sentiment using the trained model
    predict_sentiment(review)

# Run the sentiment analysis
run_sentiment_analysis()

import pickle

# Save model
with open('sentiment_model.pkl', 'wb') as model_file:
    pickle.dump(model, model_file)

# Save vectorizer
with open('tfidf_vectorizer.pkl', 'wb') as vec_file:
    pickle.dump(vectorizer, vec_file)

from google.colab import files
files.download('sentiment_model.pkl')
files.download('tfidf_vectorizer.pkl')